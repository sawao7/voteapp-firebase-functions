import React from "react";
import { NextPage } from "next";
import Head from "next/head";
import { Header } from "src/components/Header";
import styles from "styles/Home.module.css";
import classes from "styles/Ideas.module.css";

import { ethers } from "ethers";
import abi from "utils/VotePortal.json";
import Image from "next/image";
import Link from "next/link";

import { Web3Auth } from "@web3auth/modal";

const Ideas: NextPage = () => {
	const [currentAccount, setCurrentAccount] = React.useState("");
	const [web3auth, setWeb3auth] = React.useState<Web3Auth | null>(null);

	// アイデアのリスト NFTになっていないバージョンすべて
	const [ideas, setIdeas] = React.useState([]);

	// コントラクトアドレス
	const contractAddress: any = process.env.NEXT_PUBLIC_PRIVATE_CONTRACT_ADDRESS;
	const contractABI = abi.abi;

	// コピペ
	const checkIfWalletIsConnected = async () => {
		try {
			const web3auth = new Web3Auth({
				uiConfig: {
					appName: "W3A", // <-- Your dApp Name
					appLogo: "https://web3auth.io/images/w3a-L-Favicon-1.svg", // Your dApp Logo URL
					theme: "light", // "light" | "dark" | "auto"
					loginMethodsOrder: ["apple", "google", "twitter"],
					defaultLanguage: "ja", // en, de, ja, ko, zh, es, fr, pt, nl
					loginGridCol: 3, // 2 | 3
					primaryButton: "externalLogin", // "externalLogin" | "socialLogin" | "emailLogin"
				},
				clientId: "BJGFBlJG9JpTya-vbj6sVow_k40-EHuvHLzUlxchVGkNTAcWgCnsehzbd2uNmwayP0palt3nMhzdOFHtCqH_wFE", // Get your Client ID from Web3Auth Dashboard
				chainConfig: {
					chainNamespace: "eip155",
					chainId: "0x5", // Please use 0x5 for Goerli Testnet
				},
			});
			setWeb3auth(web3auth);

			await web3auth.initModal();

			connectWallet();
		} catch (error) {
			console.error(error);
		}
	};
	const connectWallet = async () => {
		console.log("hello");
		try {
			if (!web3auth) {
				console.log("web3auth not initialized yet");
				return;
			}
			console.log("test");

			const web3authProvider = await web3auth.connect();
			console.log("auth", web3authProvider);
			setCurrentAccount(web3authProvider);

			await getAllIdeas();

			console.log("done");
		} catch (error) {
			console.log(error);
		}
	};

	const getUserInfo = async () => {
		if (!web3auth) {
			console.log("web3auth not initialized yet");
			return;
		}
		const user = await web3auth.getUserInfo();
		console.log(user);
	};
	React.useEffect(() => {
		checkIfWalletIsConnected();
	}, []);

	// 特定のアイデアにVoteする関数
	const voteIdea = async (index: any, isGood: boolean) => {
		try {
			// const { ethereum } = window as any;
			console.log("index", index);
			if (currentAccount) {
				const provider = new ethers.providers.Web3Provider(currentAccount);
				const signer = provider.getSigner();
				const voteContract = new ethers.Contract(contractAddress, contractABI, signer);

				// indexのアイデアに投票する
				await voteContract.voteIdea(index, isGood);

				let result = await voteContract.getIdea(0);
				console.log("voted result: ", result);
			} else {
				console.log("Ethereum object doesn't exist!");
			}
		} catch (error) {
			console.log(error);
		}
	};

	// すべてのアイデアを取得する関数
	const getAllIdeas = async () => {
		console.log(currentAccount);
		try {
			if (currentAccount) {
				const provider = new ethers.providers.Web3Provider(currentAccount);
				const signer = provider.getSigner();
				const voteContract = new ethers.Contract(contractAddress, contractABI, signer);

				const ideas = await voteContract.getAllIdeas();
				console.log(ideas);
				setIdeas(ideas);

				
			}
		} catch (error) {
			console.log(error);
		}
	};

	const renderNotConnectedContainer = () => (
		<button onClick={connectWallet} className="cta-button connect-wallet-button">
			Connect to Wallet
		</button>
	);

	return (
		<div>
			<Head>
				<title>Ideas Page</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<Header />
			<main className={classes.main}>
				<h1>アイデア一覧</h1>
				{currentAccount === "" ? (
					renderNotConnectedContainer()
				) : (
					<div className={classes.ideas}>
						{ideas.map((idea: any, index: any) => {
							return (
								<div key={index}>
									<div className={classes.l_wrapper_06}>
										<div className={classes.card_06}>
											<Link
												href={
													"https://" +
													idea.ideaURL +
													".ipfs.w3s.link/" +
													idea.nameOriginal +
													".pdf"
												}
											>
												<Image
													className={classes.card_img_06}
													src={`https://firebasestorage.googleapis.com/v0/b/vote-dapp-60851.appspot.com/o/${idea.nameOriginal}.jpeg?alt=media`}
													width={500}
													height={200}
													objectFit="cover"
													alt=""
												/>
											</Link>
											<div className={classes.card_content_06}>
												<p className={classes.card_title_06}>{idea.name}</p>
												<p className={classes.card_text_06}>
													賛成数 : {idea.goodVotes.toNumber()}
													反対数 : {idea.badVotes.toNumber()}
												</p>
											</div>
											{idea.isFinished ? (
												idea.isNFT ? (
													<div className={classes.card_link_06}>
														<Link
															href={
																"https://testnets.opensea.io/assets/goerli/" +
																contractAddress +
																"/" +
																idea.index
															}
														>
															<button className={classes.card_link_btn_06}>
																NFTをOpenseaで見る
															</button>
														</Link>
													</div>
												) : (
													<div className={classes.card_link_06}>
														<Link
															href={
																"https://" +
																idea.ideaURL +
																".ipfs.w3s.link/" +
																idea.nameOriginal +
																".pdf"
															}
														>
															<button className={classes.card_link_btn_06}>
																差し戻しになりました
															</button>
														</Link>
													</div>
												)
											) : (
												<div className={classes.card_link_06}>
													<button
														className={classes.card_link_btn_06}
														onClick={() => voteIdea(index, true)}
													>
														賛成
													</button>
													<button
														className={classes.card_link_btn_06}
														onClick={() => voteIdea(index, false)}
													>
														反対
													</button>
												</div>
											)}
										</div>
									</div>
								</div>
							);
						})}
					</div>
				)}
			</main>
		</div>
	);
};

export default Ideas;
